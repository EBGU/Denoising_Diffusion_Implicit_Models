#from dino https://github.com/facebookresearch/dino
import math
from turtle import mode
import torch
import torch.nn as nn
import warnings
import os,sys
get_path = os.path.dirname(__file__)
sys.path.append(get_path)
current_path = os.path.dirname(__file__).split('/')

def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)

def drop_path(x, drop_prob: float = 0., training: bool = False):
    if drop_prob == 0. or not training:
        return x
    keep_prob = 1 - drop_prob
    shape = (x.shape[0],) + (1,) * (x.ndim - 1)  # work with diff dim tensors, not just 2D ConvNets
    random_tensor = keep_prob + torch.rand(shape, dtype=x.dtype, device=x.device)
    random_tensor.floor_()  # binarize
    output = x.div(keep_prob) * random_tensor
    return output


class DropPath(nn.Module):
    """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks).
    """
    def __init__(self, drop_prob=None):
        super(DropPath, self).__init__()
        self.drop_prob = drop_prob

    def forward(self, x):
        return drop_path(x, self.drop_prob, self.training)


class Mlp(nn.Module):
    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0.):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x


class Attention(nn.Module):
    def __init__(self, dim, num_heads=8, qkv_bias=False, qk_scale=None, attn_drop=0., proj_drop=0.):
        super().__init__()
        self.num_heads = num_heads
        head_dim = dim // num_heads
        self.scale = qk_scale or head_dim ** -0.5

        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)

    def forward(self, x):
        B, N, C = x.shape
        qkv = self.qkv(x).reshape(B, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
        q, k, v = qkv[0], qkv[1], qkv[2]

        attn = (q @ k.transpose(-2, -1)) * self.scale
        attn = attn.softmax(dim=-1)
        attn = self.attn_drop(attn)

        x = (attn @ v).transpose(1, 2).reshape(B, N, C)
        x = self.proj(x)
        x = self.proj_drop(x)
        return x, attn


class Block(nn.Module):
    def __init__(self, dim, num_heads, mlp_ratio=4., qkv_bias=False, qk_scale=None, drop=0., attn_drop=0.,
                 drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm):
        super().__init__()
        self.norm1 = norm_layer(dim)
        self.attn = Attention(
            dim, num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop, proj_drop=drop)
        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)

    def forward(self, x, return_attention=False):
        y, attn = self.attn(self.norm1(x))
        if return_attention:
            return attn
        x = x + self.drop_path(y)
        x = x + self.drop_path(self.mlp(self.norm2(x)))
        return x

def positionalencoding1d(d_model, length):
    """
    :param d_model: dimension of the model
    :param length: length of positions
    :return: length*d_model position matrix
    """
    if d_model % 2 != 0:
        raise ValueError("Cannot use sin/cos positional encoding with "
                         "odd dim (got dim={:d})".format(d_model))
    pe = torch.zeros(length, d_model)
    position = torch.arange(0, length).unsqueeze(1)
    div_term = torch.exp((torch.arange(0, d_model, 2, dtype=torch.float) *
                         -(math.log(10000.0) / d_model)))
    pe[:, 0::2] = torch.sin(position.float() * div_term)
    pe[:, 1::2] = torch.cos(position.float() * div_term)

    return pe

class PatchEmbed(nn.Module):
    """ Image to Patch Embedding
    """
    def __init__(self, img_size=[224,224], patch_size=16, in_chans=3, embed_dim=768):
        super().__init__()
        num_patches = (img_size[0] // patch_size) * (img_size[1] // patch_size)
        self.img_size = img_size
        self.patch_size = patch_size
        self.num_patches = num_patches
        self.proj = nn.Conv2d(in_chans, embed_dim, kernel_size=patch_size, stride=patch_size)

    def forward(self, x):
        B, C, H, W = x.shape
        x = self.proj(x).flatten(2).transpose(1, 2)
        return x


class DiffusionVisionTransformer(nn.Module):
    """ Vision Transformer """
    def __init__(self, img_size=[64,64], patch_size=8, in_chans=3, embed_dim=256, depth=3,
                 num_heads=4, mlp_ratio=1., qkv_bias=True, qk_scale=None, drop_rate=0.1, attn_drop_rate=0.1,
                 drop_path_rate=0.1, norm_layer=nn.LayerNorm,emb=PatchEmbed,total_steps = 2000, **kwargs):
        super().__init__()
        self.num_features = self.embed_dim = embed_dim
        self.patch_size = patch_size
        self.in_chans = in_chans
        self.img_size = img_size
        self.total_steps = total_steps
        self.patch_embed = emb(
            img_size=img_size, patch_size=patch_size, in_chans=in_chans, embed_dim=embed_dim)
        num_patches = self.patch_embed.num_patches
        self.cls_token = nn.Parameter(torch.zeros(1, 1, embed_dim))
        self.time_embed = nn.Embedding(total_steps,embed_dim)
        # if self.img_size[0]>64:
        #     self.register_buffer('pos_embed',positionalencoding1d(embed_dim,num_patches + 1))
        # else:    
        self.pos_embed = nn.Parameter(torch.zeros(1, num_patches + 1, embed_dim))
        trunc_normal_(self.pos_embed, std=.02)
        self.pos_drop = nn.Dropout(p=drop_rate)
        dpr = [x.item() for x in torch.linspace(0, drop_path_rate, depth)]  # stochastic depth decay rule
        self.blocks = nn.ModuleList([
            Block(
                dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,
                drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer)
            for i in range(depth)])
        self.norm = norm_layer(embed_dim)
        self.head = nn.Linear(embed_dim, in_chans*patch_size**2)
        trunc_normal_(self.cls_token, std=.02)
        trunc_normal_(self.time_embed.weight, std=.02)
        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)


    def prepare_tokens(self, x,steps):
        B, nc, w, h = x.shape
        x = self.patch_embed(x)  # patch linear embedding
        cls_tokens = self.cls_token.expand(B, -1, -1)
        x = torch.cat((cls_tokens, x), dim=1)
        time_step = self.time_embed(steps).unsqueeze_(1)
        x = x + self.pos_embed + time_step
        return self.pos_drop(x)

    def forward(self,x,t):
        x = self.prepare_tokens(x,t)
        for i,blk in enumerate(self.blocks):
            x = blk(x)
        x = self.norm(x)
        x = self.head(x)
        img = x[:,1:,:]
        img = img.view(-1,self.img_size[0]//self.patch_size,self.img_size[1]//self.patch_size,self.patch_size,self.patch_size,self.in_chans)
        img = img.permute(0, 5, 1, 3, 2, 4).contiguous()
        img = img.view(-1,self.in_chans,self.img_size[0],self.img_size[1])
        return img

    @torch.no_grad()
    def sampler(self,device,k=10,N=128):
        import time
        start_time = time.time()  
        noisy_img = torch.normal(0,1,(N,3,self.img_size[0],self.img_size[1]))    
        noisy_img = noisy_img.to(device)
        for t in range(self.total_steps-1,0,-k):
            steps = torch.tensor([t]*N,device = device).long()
            denoised_img = self.forward(noisy_img,steps)
            denoised_img = torch.clamp(denoised_img,-1,1)
            #DDIM
            alpha_tk = 1 - math.sqrt((t+1-k)/self.total_steps)#+1e-5
            alpha_t = 1 - math.sqrt((t+1)/self.total_steps)+1e-5
            noise = (noisy_img - math.sqrt(alpha_t)*denoised_img)/math.sqrt(1-alpha_t)
            noisy_img = math.sqrt(alpha_tk)*(noisy_img/math.sqrt(alpha_t) + (math.sqrt((1-alpha_tk)/alpha_tk) - math.sqrt((1-alpha_t)/alpha_t))*noise)
            print(f"\rnoise level {t}  {time.time()-start_time:.2f}",end='')
        img = (denoised_img.cpu()+1)/2
        return img
    
    @torch.no_grad()
    def cold_sampler(self,device,k=10,N=128):
        import time
        import copy
        start_time = time.time()  
        noisy_img = torch.normal(0,1,(N,3,self.img_size[0],self.img_size[1]))    
        noisy_img = noisy_img.to(device)
        noise = copy.deepcopy(noisy_img)
        # eps = np.linspace(1,0,self.total_steps//k)[1:-1]
        # steps_t = list(eps**0.5*self.total_steps)
        # # steps_tk = steps_t[1:]+[0]
        # for t,tk in zip(steps_t,steps_tk):
        for t in range(self.total_steps-1,0,-k):
            steps = torch.tensor([int(t)]*N,device = device).long()
            denoised_img = self.forward(noisy_img,steps)
            denoised_img = torch.clamp(denoised_img,-1,1)
            #DDIM
            # alpha_tk = 1 - math.sqrt(int(tk)/self.total_steps)#+1e-5
            # alpha_t = 1 - math.sqrt(int(t)/self.total_steps)+1e-5
            alpha_tk = 1 - math.sqrt((t+1-k)/self.total_steps)#+1e-5
            alpha_t = 1 - math.sqrt((t+1)/self.total_steps)+1e-5
            pred_noisy_t = math.sqrt(alpha_t)*denoised_img+math.sqrt(1-alpha_t)*noise
            pred_noisy_tk = math.sqrt(alpha_tk)*denoised_img+math.sqrt(1-alpha_tk)*noise
            noisy_img = noisy_img-pred_noisy_t+pred_noisy_tk
            # noise = (noisy_img - math.sqrt(alpha_t)*denoised_img)/math.sqrt(1-alpha_t)
            # noisy_img = math.sqrt(alpha_tk)*(noisy_img/math.sqrt(alpha_t) + (math.sqrt((1-alpha_tk)/alpha_tk) - math.sqrt((1-alpha_t)/alpha_t))*noise)
            print(f"\rnoise level {int(t)}  {time.time()-start_time:.2f}",end='')
        img = (denoised_img.cpu()+1)/2
        return img
    
    @torch.no_grad()
    def diffusion_sequence(self,device,k=100,N=5):
        import time
        start_time = time.time()
        noisy_img = torch.normal(0,1,(N,3,self.img_size[0],self.img_size[1]))    
        noisy_img = noisy_img.to(device)
        img = [(noisy_img.cpu()+1)/2]
        for t in range(self.total_steps-1,0,-k):
            steps = torch.tensor([t]*N,device = device).long()
            denoised_img = self.forward(noisy_img,steps)
            denoised_img = torch.clamp(denoised_img,-1,1)
            #DDIM
            alpha_tk = 1 - math.sqrt((t+1-k)/self.total_steps)#+1e-5
            alpha_t = 1 - math.sqrt((t+1)/self.total_steps)+1e-5
            noise = (noisy_img - math.sqrt(alpha_t)*denoised_img)/math.sqrt(1-alpha_t)
            noisy_img = math.sqrt(alpha_tk)*(noisy_img/math.sqrt(alpha_t) + (math.sqrt((1-alpha_tk)/alpha_tk) - math.sqrt((1-alpha_t)/alpha_t))*noise)
            img.append((denoised_img.cpu()+1)/2)
            print(f"\rnoise level {t}  {time.time()-start_time:.2f}",end='')
        return img
            
if __name__ == "__main__":
    import matplotlib.pyplot as plt
    from mpl_toolkits.axes_grid1 import ImageGrid
    import torchvision.transforms.functional as transF
    device = torch.device('cuda')
    # model = DiffusionVisionTransformer(img_size=[64,64],total_steps=2000,patch_size=8,embed_dim=384,depth=7,num_heads=12) #miniImageNet
    # state = torch.load(get_path+"/Saved_Models/miniImageNet.pkl")

    # model = DiffusionVisionTransformer(img_size=[64,64],total_steps=2000,patch_size=4,embed_dim=256,depth=6,num_heads=4) #oxford flower
    # state = torch.load(get_path+"/Saved_Models/OxfordFlower.pkl")

    model = DiffusionVisionTransformer(img_size=[200,200],total_steps=2000,patch_size=4,embed_dim=256,depth=6,num_heads=4) #oxford flower
    state = torch.load(get_path+"/Saved_Models/OxfordFlower_200.pkl")

    model.load_state_dict(state,strict=True)
    model.to(device)
    model.eval()
    img_size = model.img_size


    # #image sampling
    # n_sqrt = 8
    # img = model.sampler(device,10,n_sqrt**2)
    # fig = plt.figure(figsize=(32., 32.))
    # grid = ImageGrid(fig, 111,  # similar to subplot(111)
    #                 nrows_ncols=(n_sqrt, n_sqrt),  # creates 2x2 grid of axes
    #                 axes_pad=0.1,  # pad between axes in inch.
    #                 )
    # for ax, im in zip(grid,img):
    #     # Iterating over the grid returns the Axes.
    #     ax.imshow(transF.to_pil_image(im))
    # plt.savefig(get_path+"/Saved_Models/samples.png",bbox_inches='tight')

    # #show denoise sequence
    # N = 6
    # img = model.diffusion_sequence(device,100,N=N)
    # fig = plt.figure(figsize=(len(img),1.5*N),dpi=300)
    # grid = ImageGrid(fig, 111,  # similar to subplot(111)
    #                 nrows_ncols=(N, len(img)),  # creates 2x2 grid of axes
    #                 axes_pad=0.1,  # pad between axes in inch.
    #                 )
    # img = torch.stack(img,dim=0).transpose(0,1).flatten(0,1)
    # for ax, im in zip(grid,img):
    #     # Iterating over the grid returns the Axes.
    #     ax.imshow(transF.to_pil_image(im))
    # plt.savefig(get_path+"/Saved_Models/denoise_sequence.png",bbox_inches='tight')

    #draft to image
    from PIL import Image  
    import time
    def img2tensor(path,w,h):
        with open(path, 'rb') as f:
            img = Image.open(f)
            img = img.convert('RGB')  
        img = transF.to_tensor(img)
        img = transF.resize(img,(w,h))
        img = img*2 -1        
        return img.unsqueeze_(0)
    img = get_path+"/Saved_Models/draft.jpg"
    k = 10
    steps = list(range(1599,2000,50))
    img_list = []
    start_time = time.time()
    for t_start in steps:
        alpha = 1 - math.sqrt((t_start)/2000)
        noisy_img = torch.normal(0,1,(1,3,*img_size))*math.sqrt(1-alpha)+img2tensor(img,*img_size)*math.sqrt(alpha)
        noisy_img = noisy_img.cuda()
        with torch.no_grad():
            for t in range(t_start,0,-k):
                t_ = torch.tensor([t],device = device).long()
                denoised_img = model.forward(noisy_img,t_)
                denoised_img = torch.clamp(denoised_img,-1,1)
                #DDIM
                alpha_tk = 1 - math.sqrt((t-k+1)/2000)#+1e-5
                alpha_t = 1 - math.sqrt((t+1)/2000)+1e-5
                noise = (noisy_img - math.sqrt(alpha_t)*denoised_img)/math.sqrt(1-alpha_t)
                noisy_img = math.sqrt(alpha_tk)*(noisy_img/math.sqrt(alpha_t) + (math.sqrt((1-alpha_tk)/alpha_tk) - math.sqrt((1-alpha_t)/alpha_t))*noise)
                print(f"\rnoise level {t}  {time.time()-start_time:.2f}",end='')
        img_list.append((denoised_img.cpu()+1)/2)               
    fig = plt.figure(figsize=(6*(len(steps)),6),dpi=300)
    grid = ImageGrid(fig, 111,  # similar to subplot(111)
                    nrows_ncols=(1,len(steps)+1),  # creates 2x2 grid of axes
                    axes_pad=0.1,  # pad between axes in inch.
                    )
    img_list = torch.cat(img_list,dim=0)
    for ax, im in zip(grid,img_list):
        # Iterating over the grid returns the Axes.
        ax.imshow(transF.to_pil_image(im))
    plt.savefig(get_path+"/Saved_Models/draft2img.png",bbox_inches='tight')


    # #test interpolation
    # from PIL import Image  
    # import time
    # def img2tensor(path,w,h):
    #     with open(path, 'rb') as f:
    #         img = Image.open(f)
    #         img = img.convert('RGB')  
    #     img = transF.to_tensor(img)
    #     img = transF.resize(img,(w,h))
    #     img = img*2 -1        
    #     return img.unsqueeze_(0)
    # img1 = get_path+"/Saved_Models/img_6.jpg"
    # img2 = get_path+"/Saved_Models/img_8.jpg"
    # k = 10
    # lambdas1 = torch.linspace(0,1,11).view(-1,1,1,1)
    # lambdas2 = 1-torch.linspace(0,1,11).view(-1,1,1,1)
    # steps = list(range(99,2000,100))
    # inter1 = lambdas1*img2tensor(img1,*img_size)+lambdas2*img2tensor(img2,*img_size)
    # img = [(inter1+1)/2]
    # start_time = time.time()
    # for t_start in steps:
    #     alpha = 1 - math.sqrt((t_start)/2000)
    #     noisy_img1 = torch.normal(0,1,(1,3,*img_size))*math.sqrt(1-alpha)+img2tensor(img1,*img_size)*math.sqrt(alpha)
    #     noisy_img2 = torch.normal(0,1,(1,3,*img_size))*math.sqrt(1-alpha)+img2tensor(img2,*img_size)*math.sqrt(alpha)
        
    #     #noisy_img = lambdas1*noisy_img1+lambdas2*noisy_img2 #linear interpolation
        
    #     #spherical linear interpolation
    #     theta = torch.arccos((noisy_img1.flatten()@noisy_img2.flatten())/(torch.linalg.norm(noisy_img1)*torch.linalg.norm(noisy_img2)))
    #     sin_theta_1 = 1/torch.sin(theta)
    #     noisy_img = sin_theta_1*(torch.sin(theta*lambdas1)*noisy_img1+torch.sin(theta*lambdas2)*noisy_img2)

    #     noisy_img = noisy_img.cuda()
    #     with torch.no_grad():
    #         for t in range(t_start,0,-k):
    #             t_ = torch.tensor([t]*11,device = device).long()
    #             denoised_img = model.forward(noisy_img,t_)
    #             denoised_img = torch.clamp(denoised_img,-1,1)
    #             #DDIM
    #             alpha_tk = 1 - math.sqrt((t-k+1)/2000)#+1e-5
    #             alpha_t = 1 - math.sqrt((t+1)/2000)+1e-5
    #             noise = (noisy_img - math.sqrt(alpha_t)*denoised_img)/math.sqrt(1-alpha_t)
    #             noisy_img = math.sqrt(alpha_tk)*(noisy_img/math.sqrt(alpha_t) + (math.sqrt((1-alpha_tk)/alpha_tk) - math.sqrt((1-alpha_t)/alpha_t))*noise)
    #             print(f"\rnoise level {t}  {time.time()-start_time:.2f}",end='')
    #     img.append((denoised_img.cpu()+1)/2)               
    # fig = plt.figure(figsize=(11,1.5*(len(steps)+1)),dpi=300)
    # grid = ImageGrid(fig, 111,  # similar to subplot(111)
    #                 nrows_ncols=(len(steps)+1, 11),  # creates 2x2 grid of axes
    #                 axes_pad=0.1,  # pad between axes in inch.
    #                 )
    # img = torch.stack(img,dim=0).flatten(0,1)
    # for ax, im in zip(grid,img):
    #     # Iterating over the grid returns the Axes.
    #     ax.imshow(transF.to_pil_image(im))
    # plt.savefig(get_path+"/Saved_Models/interpolation.png",bbox_inches='tight')

